{"ast":null,"code":"import * as actionTypes from './actionsTypes';\nimport axios from 'axios';\nexport const authstart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authsuccess = (userid, token) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token,\n    userid: userid\n  };\n};\nexport const authredirectpath = redirectingpath => {\n  return {\n    type: actionTypes.AUTH_REDIRECT_PATH,\n    redirectingpath: redirectingpath\n  };\n};\nexport const authfail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const authlogout = () => {\n  localStorage.removeItem('USER_TOKEN');\n  localStorage.removeItem('EXPIRING_TIME');\n  localStorage.removeItem('USERID');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const expirelogout = expiringTime => {\n  expiringTime *= 1000;\n  console.log(expiringTime);\n  console.log('this is called');\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(authlogout());\n    }, expiringTime);\n  };\n};\nexport const auth = (email, password, isSignup) => {\n  return dispatch => {\n    dispatch(authstart());\n    const authobj = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCavA4zL9BHF0oIo2JMw6VUsg08y_PuOsk';\n    console.log(\"this is from action \", isSignup);\n\n    if (isSignup) {\n      url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCavA4zL9BHF0oIo2JMw6VUsg08y_PuOsk';\n    }\n\n    axios.post(url, authobj).then(response => {\n      console.log(response.data);\n      const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n      localStorage.setItem('USER_TOKEN', response.data.idToken);\n      localStorage.setItem('EXPIRING_TIME', expirationDate);\n      localStorage.setItem('USERID', response.data.localId);\n      dispatch(authsuccess(response.data.localId, response.data.idToken));\n      dispatch(expirelogout(response.data.expiresIn));\n    }).catch(err => {\n      console.log(err);\n      dispatch(authfail(err));\n    });\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('USER_TOKEN');\n    console.log(\"this is token\", token);\n\n    if (!token) {\n      dispatch(authlogout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('EXPIRING_TIME'));\n      console.log(\"this is expiring time befaore auth suucc \", expirationDate);\n\n      if (expirationDate <= new Date()) {\n        dispatch(authlogout());\n        console.log('pass');\n      } else {\n        const userId = localStorage.getItem('USERID');\n        dispatch(authsuccess(userId, token));\n        dispatch(expirelogout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/home/shubham/Documents/assignments/React_Project/Burger_Builder/src/store/actions/Auth.js"],"names":["actionTypes","axios","authstart","type","AUTH_START","authsuccess","userid","token","AUTH_SUCCESS","authredirectpath","redirectingpath","AUTH_REDIRECT_PATH","authfail","error","AUTH_FAIL","authlogout","localStorage","removeItem","AUTH_LOGOUT","expirelogout","expiringTime","console","log","dispatch","setTimeout","auth","email","password","isSignup","authobj","returnSecureToken","url","post","then","response","data","expirationDate","Date","getTime","expiresIn","setItem","idToken","localId","catch","err","authCheckState","getItem","userId"],"mappings":"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","sourcesContent":["import * as actionTypes  from './actionsTypes'\n\nimport axios from 'axios'\nexport const authstart = () => {\n    return {\n        type : actionTypes.AUTH_START ,\n\n    }\n}\n\nexport const authsuccess = (userid , token) => {\n        \n    return {\n        type : actionTypes.AUTH_SUCCESS ,\n        token : token , \n        userid : userid\n    }\n} \nexport const authredirectpath = (redirectingpath) => {\n\n    return {\n        type : actionTypes.AUTH_REDIRECT_PATH ,\n        redirectingpath : redirectingpath\n    }\n}\nexport const authfail = (error) => {\n    return {\n        type : actionTypes.AUTH_FAIL ,\n        error : error \n    }\n}\n\nexport const authlogout = () => {\n    localStorage.removeItem('USER_TOKEN')\n    localStorage.removeItem('EXPIRING_TIME')\n    localStorage.removeItem('USERID')\n    return {\n        type : actionTypes.AUTH_LOGOUT \n    }\n}\n\nexport const expirelogout = (expiringTime) =>{\n     expiringTime *= 1000;\n     console.log(expiringTime)\n     console.log('this is called')\n      return dispatch => {\n          \n        setTimeout(() => {\n            dispatch(authlogout())\n      } , expiringTime)\n    }\n}\n\n\nexport const auth = (email , password , isSignup) => {\n      return dispatch => {\n          dispatch(authstart());\n          const authobj = {\n              email : email , \n              password : password , \n              returnSecureToken : true \n          }\n          let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCavA4zL9BHF0oIo2JMw6VUsg08y_PuOsk'\n          console.log(\"this is from action \" , isSignup)\n          if(isSignup)\n          {\n              url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCavA4zL9BHF0oIo2JMw6VUsg08y_PuOsk'\n              \n          }\n\n          axios.post( url , authobj)\n          .then(response => {\n              console.log(response.data)\n              const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n\n              localStorage.setItem('USER_TOKEN' , response.data.idToken)\n              localStorage.setItem('EXPIRING_TIME' , expirationDate)\n               localStorage.setItem('USERID' , response.data.localId)\n              dispatch(authsuccess(response.data.localId , response.data.idToken ))\n            dispatch(expirelogout(response.data.expiresIn))\n          })\n          .catch(err =>{\n               console.log(err) \n               dispatch(authfail(err))\n          })\n      }\n}\nexport const authCheckState = () => {\n    return dispatch => {\n        const token = localStorage.getItem('USER_TOKEN');\n        console.log(\"this is token\" , token)\n        if (!token) {\n    \n            dispatch(authlogout());\n        } else {\n            const expirationDate = new Date(localStorage.getItem('EXPIRING_TIME'));\n            console.log(\"this is expiring time befaore auth suucc \" , expirationDate)\n            if (expirationDate <= new Date()) {\n            \n                dispatch(authlogout());\n                console.log('pass')\n            } else {\n                const userId = localStorage.getItem('USERID');\n                dispatch(authsuccess(userId, token));\n                dispatch(expirelogout((expirationDate.getTime() - new Date().getTime()) / 1000 ));\n            }   \n        }\n    };\n};\n\n"]},"metadata":{},"sourceType":"module"}