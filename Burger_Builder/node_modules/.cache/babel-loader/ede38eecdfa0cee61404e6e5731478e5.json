{"ast":null,"code":"var _jsxFileName = \"/home/shubham/Documents/assignments/React_Project/Burger_Builder/src/containers/Auth/Auth.js\";\nimport React, { Component } from 'react';\nimport classes from './Auth.module.css';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport * as action from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { checkValidity } from '../../shared/Utility';\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your E-Mail'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Enter Password'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignup: true\n    };\n\n    this.submithandler = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    };\n\n    this.switchauthhandler = event => {\n      //  event.preventDefault()\n      this.setState(prevState => {\n        return {\n          isSignup: !prevState.isSignup\n        };\n      });\n      console.log(this.state.isSignup);\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      event.preventDefault();\n      const updatedOrderForm = { ...this.state.controls\n      };\n      const updatedFormElement = { ...updatedOrderForm[inputIdentifier]\n      };\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      this.setState({\n        controls: updatedOrderForm\n      }); // console.log(this.state)\n    };\n  }\n\n  componentDidMount() {\n    console.log(this.props.redirectpath);\n\n    if (!this.props.building && this.props.redirectpath !== '/') {\n      this.props.authredirectpath('/');\n    }\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }\n    }));\n\n    if (this.props.loading) {\n      form = /*#__PURE__*/React.createElement(Spinner, {\n        left: \"0%\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }\n      });\n    }\n\n    let error = null;\n\n    if (this.props.error) {\n      error = this.props.error.message;\n    }\n\n    let isAuth = null;\n\n    if (this.props.isAuthenticated) {\n      isAuth = /*#__PURE__*/React.createElement(Redirect, {\n        to: this.props.redirectpath,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 25\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Auth,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }\n    }, isAuth, error, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submithandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }\n    }, form, /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 21\n      }\n    }, \"Submit\")), /*#__PURE__*/React.createElement(Button, {\n      clicked: this.switchauthhandler,\n      btnType: \"Danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }\n    }, \"Switch to \", this.state.isSignup ? 'Signup' : 'Signin'));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    redirectpath: state.auth.authredirectpath,\n    building: state.burgerBuilder.building\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, signupFlag) => dispatch(action.auth(email, password, signupFlag)),\n    authredirectpath: path => dispatch(action.authredirectpath(path))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/home/shubham/Documents/assignments/React_Project/Burger_Builder/src/containers/Auth/Auth.js"],"names":["React","Component","classes","Input","Button","action","Spinner","connect","Redirect","checkValidity","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","isSignup","submithandler","event","preventDefault","props","onAuth","switchauthhandler","setState","prevState","console","log","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","componentDidMount","redirectpath","building","authredirectpath","render","formElementsArray","key","push","id","config","form","map","formElement","loading","error","message","isAuth","isAuthenticated","mapStateToProps","auth","token","burgerBuilder","mapDispatchToProps","dispatch","signupFlag","path"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport classes from './Auth.module.css'\nimport Input from '../../components/UI/Input/Input'\nimport Button from '../../components/UI/Button/Button'\nimport * as action from '../../store/actions/index'\nimport Spinner from '../../components/UI/Spinner/Spinner'\nimport {connect} from 'react-redux'\nimport { Redirect } from 'react-router-dom'\nimport{ checkValidity }from'../../shared/Utility'\n\nclass Auth extends Component {\n\n\n    state = {\n        controls : {\n         email: {\n             elementType: 'input',\n             elementConfig: {\n                 type: 'email',\n                 placeholder: 'Your E-Mail'\n             },\n             value: '',\n             validation: {\n                 required: true,\n                 isEmail: true\n             },\n             valid: false,\n             touched: false\n         },\n         password : {\n             elementType : 'input' , \n             elementConfig : {\n                 type : 'password' , \n                 placeholder : 'Enter Password' \n             } , \n             value :'',\n             validation : {\n                 required : true , \n                 \n             } ,\n             valid : false , \n             touched : false \n         }\n        } ,\n\n        isSignup : true ,\n    \n     }\n\n\n    \n\n     submithandler = (event) => {\n         event.preventDefault();\n         this.props.onAuth(this.state.controls.email.value , this.state.controls.password.value , this.state.isSignup)\n     }\n\n     switchauthhandler = (event) => {\n        //  event.preventDefault()\n       this.setState((prevState)=> {\n            return {\n                isSignup : !prevState.isSignup\n            }\n       })\n       console.log(this.state.isSignup)\n     }\n\n     inputChangedHandler = (event , inputIdentifier) => {\n         event.preventDefault() ;\n         const updatedOrderForm = {\n            ...this.state.controls\n        };\n        const updatedFormElement = { \n            ...updatedOrderForm[inputIdentifier]\n        };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = checkValidity(updatedFormElement.value, updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n            \n        this.setState({controls : updatedOrderForm})\n        // console.log(this.state)\n     }\n\n      componentDidMount()\n     {     \n         console.log(this.props.redirectpath)\n         if(!this.props.building&& this.props.redirectpath !== '/')\n         {\n         this.props.authredirectpath('/')\n       \n         }\n     }\n\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            });\n        }\n        let form = formElementsArray.map(formElement => (\n                    <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n                ))\n                \n        if(this.props.loading) {\n            form =  <Spinner left = \"0%\" />\n        }\n      \n        let error = null;\n\n        if(this.props.error)\n        {\n            error = this.props.error.message\n        }\n\n          let  isAuth = null\n          if(this.props.isAuthenticated)\n          { \n              isAuth =  <Redirect to = {this.props.redirectpath} />\n          }\n        return (\n             \n            <div className = {classes.Auth}>\n                 {isAuth}\n                {error}\n                <form  onSubmit = {this.submithandler}>\n                    {form}\n                    <Button btnType=\"Success\" >Submit</Button>\n                </form>\n                <Button  clicked = {this.switchauthhandler} btnType = \"Danger\">Switch to {this.state.isSignup ? 'Signup' : 'Signin'}</Button>\n\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => {\n  return{\n    loading : state.auth.loading ,  \n    error : state.auth.error ,\n    isAuthenticated : state.auth.token !== null,\n     redirectpath : state.auth.authredirectpath , \n     building : state.burgerBuilder.building\n  }\n    \n\n}\n\nconst mapDispatchToProps = dispatch => {\n\n\n    return {\n\n        onAuth : (email , password , signupFlag  ) => dispatch(action.auth(email , password , signupFlag)) ,\n        authredirectpath : (path) => dispatch(action.authredirectpath(path))\n    }\n}\n\nexport default connect(mapStateToProps , mapDispatchToProps)(Auth)"]},"metadata":{},"sourceType":"module"}