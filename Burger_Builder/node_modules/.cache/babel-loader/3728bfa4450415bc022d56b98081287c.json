{"ast":null,"code":"import * as actionType from '../actions/actionsTypes';\nimport axios from '../../Axios-instance';\n\nconst purchaseSuccessHandler = (id, orderData) => {\n  return {\n    type: actionType.PURCHASE_SUCCESS,\n    orderid: id,\n    orderData: orderData\n  };\n};\n\nconst purchaseFailedHandler = error => {\n  return {\n    type: actionType.PURCHASE_FAIL,\n    error: error\n  };\n};\n\nexport const purchaseStartHandler = () => {\n  return {\n    type: actionType.PURCHASE_START\n  };\n};\nexport const purchaseInitHandler = () => {\n  return {\n    type: actionType.PURCHASE_INIT\n  };\n};\nexport const fetchOrdersSuccess = orders => {\n  return {\n    type: actionType.FETCH_ORDERS_SUCCESS,\n    orders: orders\n  };\n};\nexport const fetchOrdersFail = error => {\n  return {\n    type: actionType.FETCH_ORDERS_FAIL,\n    error: error\n  };\n};\nexport const fetchOrdersStart = () => {\n  return {\n    type: actionType.FETCH_ORDERS_START\n  };\n};\nexport const fetchOrders = (token, userId) => {\n  return dispatch => {\n    dispatch(fetchOrdersStart());\n    console.log(\"this is fetch order action {}{{{{{{{{{{{{{}}}}}}}}}}}}}}{{{{{}}\", userId);\n    const queryParams = '?auth=' + token + '&orderBy=\"userId\"&equalTo=\"' + userId + '\"';\n    axios.get('/orders.json' + queryParams).then(res => {\n      const fetchedOrders = [];\n\n      for (let key in res.data) {\n        fetchedOrders.push({ ...res.data[key],\n          id: key\n        });\n      }\n\n      dispatch(fetchOrdersSuccess(fetchedOrders));\n    }).catch(err => {\n      dispatch(fetchOrdersFail(err));\n    });\n  };\n};\nexport const purchaseBurger = (orderData, token) => {\n  return dispatch => {\n    dispatch(purchaseStartHandler());\n    console.log(\"this is orderdata\", orderData, token);\n    axios.post('/orders.json?auth=' + token, orderData).then(Response => {\n      console.log(Response);\n      dispatch(purchaseSuccessHandler(Response.data.id, Response.data));\n    }).catch(error => {\n      console.log(error);\n      dispatch(purchaseFailedHandler(error));\n    });\n  };\n};","map":{"version":3,"sources":["/home/shubham/Documents/assignments/React_Project/Burger_Builder/src/store/actions/order.js"],"names":["actionType","axios","purchaseSuccessHandler","id","orderData","type","PURCHASE_SUCCESS","orderid","purchaseFailedHandler","error","PURCHASE_FAIL","purchaseStartHandler","PURCHASE_START","purchaseInitHandler","PURCHASE_INIT","fetchOrdersSuccess","orders","FETCH_ORDERS_SUCCESS","fetchOrdersFail","FETCH_ORDERS_FAIL","fetchOrdersStart","FETCH_ORDERS_START","fetchOrders","token","userId","dispatch","console","log","queryParams","get","then","res","fetchedOrders","key","data","push","catch","err","purchaseBurger","post","Response"],"mappings":"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","sourcesContent":["import * as actionType from '../actions/actionsTypes'\nimport axios from '../../Axios-instance'\n\nconst purchaseSuccessHandler = (id, orderData) => {\n    return {\n        type: actionType.PURCHASE_SUCCESS,\n        orderid: id,\n        orderData: orderData,\n\n    }\n}\n\nconst purchaseFailedHandler = (error) => {\n\n    return {\n        type: actionType.PURCHASE_FAIL,\n        error: error\n    }\n}\n\nexport const purchaseStartHandler = () => {\n    return {\n        type: actionType.PURCHASE_START\n    }\n}\n\nexport const purchaseInitHandler = () => {\n    return {\n        type: actionType.PURCHASE_INIT\n    }\n}\n\nexport const fetchOrdersSuccess = (orders) => {\n    return {\n        type: actionType.FETCH_ORDERS_SUCCESS,\n        orders: orders\n    };\n};\n\nexport const fetchOrdersFail = (error) => {\n    return {\n        type: actionType.FETCH_ORDERS_FAIL,\n        error: error\n    };\n};\n\nexport const fetchOrdersStart = () => {\n    return {\n        type: actionType.FETCH_ORDERS_START\n    };\n};\n\nexport const fetchOrders = (token, userId) => {\n    return dispatch => {\n        dispatch(fetchOrdersStart());\n        console.log(\"this is fetch order action {}{{{{{{{{{{{{{}}}}}}}}}}}}}}{{{{{}}\", userId)\n        const queryParams = '?auth=' + token + '&orderBy=\"userId\"&equalTo=\"' + userId + '\"';\n        axios.get('/orders.json' + queryParams)\n            .then(res => {\n                const fetchedOrders = [];\n                for (let key in res.data) {\n                    fetchedOrders.push({\n                        ...res.data[key],\n                        id: key\n                    });\n                }\n                dispatch(fetchOrdersSuccess(fetchedOrders));\n            })\n            .catch(err => {\n                dispatch(fetchOrdersFail(err));\n            });\n    };\n};\n\n\n\nexport const purchaseBurger = (orderData, token) => {\n\n    return dispatch => {\n        dispatch(purchaseStartHandler())\n        console.log(\"this is orderdata\", orderData, token)\n        axios.post('/orders.json?auth=' + token, orderData)\n            .then(Response => {\n                console.log(Response)\n                dispatch(purchaseSuccessHandler(Response.data.id, Response.data))\n            })\n            .catch(error => {\n                console.log(error)\n                dispatch(purchaseFailedHandler(error))\n            })\n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}